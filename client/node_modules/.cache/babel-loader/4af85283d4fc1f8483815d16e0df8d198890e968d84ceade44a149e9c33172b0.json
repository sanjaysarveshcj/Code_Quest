{"ast":null,"code":"var _jsxFileName = \"D:\\\\codequest-main (2)\\\\codequest-main\\\\client\\\\src\\\\pages\\\\Multilanguage\\\\LanguageContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LanguageContext = /*#__PURE__*/createContext();\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState(localStorage.getItem(\"lang\") || \"en\");\n  useEffect(() => {\n    localStorage.setItem(\"lang\", language);\n  }, [language]);\n  const translatePage = async lang => {\n    setLanguage(lang);\n    try {\n      const elements = document.body.getElementsByTagName(\"*\");\n      let textNodes = [];\n      for (let element of elements) {\n        for (let node of element.childNodes) {\n          if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== \"\") {\n            textNodes.push({\n              node,\n              text: node.nodeValue.trim()\n            });\n          }\n        }\n        if (element.placeholder) {\n          textNodes.push({\n            node: element,\n            text: element.placeholder,\n            isPlaceholder: true\n          });\n        }\n      }\n      let texts = textNodes.map(item => item.text);\n      const response = await axios.post(\"http://localhost:5000/api/translate\", {\n        text: texts,\n        targetLang: lang\n      });\n      if (Array.isArray(response.data) && response.data.length === textNodes.length) {\n        textNodes.forEach((item, index) => {\n          var _response$data$index;\n          let translatedText = ((_response$data$index = response.data[index]) === null || _response$data$index === void 0 ? void 0 : _response$data$index.translation_text) || item.text;\n          if (item.isPlaceholder) {\n            item.node.placeholder = translatedText;\n          } else {\n            item.node.nodeValue = translatedText;\n          }\n        });\n      }\n    } catch (error) {\n      var _error$response;\n      console.error(\"Translation Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      setLanguage,\n      translatePage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"++S/hv8gd9URhu8Gev95nqybeI0=\");\n_c = LanguageProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","LanguageContext","LanguageProvider","children","_s","language","setLanguage","localStorage","getItem","setItem","translatePage","lang","elements","document","body","getElementsByTagName","textNodes","element","node","childNodes","nodeType","Node","TEXT_NODE","nodeValue","trim","push","text","placeholder","isPlaceholder","texts","map","item","response","post","targetLang","Array","isArray","data","length","forEach","index","_response$data$index","translatedText","translation_text","error","_error$response","console","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/codequest-main (2)/codequest-main/client/src/pages/Multilanguage/LanguageContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const LanguageContext = createContext();\r\n\r\nexport const LanguageProvider = ({ children }) => {\r\n  const [language, setLanguage] = useState(localStorage.getItem(\"lang\") || \"en\");\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"lang\", language);\r\n  }, [language]);\r\n\r\n  const translatePage = async (lang) => {\r\n    setLanguage(lang);\r\n    try {\r\n      const elements = document.body.getElementsByTagName(\"*\");\r\n      let textNodes = [];\r\n\r\n      for (let element of elements) {\r\n        for (let node of element.childNodes) {\r\n          if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== \"\") {\r\n            textNodes.push({ node, text: node.nodeValue.trim() });\r\n          }\r\n        }\r\n        if (element.placeholder) {\r\n          textNodes.push({ node: element, text: element.placeholder, isPlaceholder: true });\r\n        }\r\n      }\r\n\r\n      let texts = textNodes.map(item => item.text);\r\n      const response = await axios.post(\"http://localhost:5000/api/translate\", {\r\n        text: texts,\r\n        targetLang: lang,\r\n      });\r\n\r\n      if (Array.isArray(response.data) && response.data.length === textNodes.length) {\r\n        textNodes.forEach((item, index) => {\r\n          let translatedText = response.data[index]?.translation_text || item.text;\r\n          if (item.isPlaceholder) {\r\n            item.node.placeholder = translatedText;\r\n          } else {\r\n            item.node.nodeValue = translatedText;\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Translation Error:\", error.response?.data || error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <LanguageContext.Provider value={{ language, setLanguage, translatePage }}>\r\n      {children}\r\n    </LanguageContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;AAE9C,OAAO,MAAMO,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAACW,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;EAE9EX,SAAS,CAAC,MAAM;IACdU,YAAY,CAACE,OAAO,CAAC,MAAM,EAAEJ,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMK,aAAa,GAAG,MAAOC,IAAI,IAAK;IACpCL,WAAW,CAACK,IAAI,CAAC;IACjB,IAAI;MACF,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,IAAI,CAACC,oBAAoB,CAAC,GAAG,CAAC;MACxD,IAAIC,SAAS,GAAG,EAAE;MAElB,KAAK,IAAIC,OAAO,IAAIL,QAAQ,EAAE;QAC5B,KAAK,IAAIM,IAAI,IAAID,OAAO,CAACE,UAAU,EAAE;UACnC,IAAID,IAAI,CAACE,QAAQ,KAAKC,IAAI,CAACC,SAAS,IAAIJ,IAAI,CAACK,SAAS,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YACpER,SAAS,CAACS,IAAI,CAAC;cAAEP,IAAI;cAAEQ,IAAI,EAAER,IAAI,CAACK,SAAS,CAACC,IAAI,CAAC;YAAE,CAAC,CAAC;UACvD;QACF;QACA,IAAIP,OAAO,CAACU,WAAW,EAAE;UACvBX,SAAS,CAACS,IAAI,CAAC;YAAEP,IAAI,EAAED,OAAO;YAAES,IAAI,EAAET,OAAO,CAACU,WAAW;YAAEC,aAAa,EAAE;UAAK,CAAC,CAAC;QACnF;MACF;MAEA,IAAIC,KAAK,GAAGb,SAAS,CAACc,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACL,IAAI,CAAC;MAC5C,MAAMM,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,IAAI,CAAC,qCAAqC,EAAE;QACvEP,IAAI,EAAEG,KAAK;QACXK,UAAU,EAAEvB;MACd,CAAC,CAAC;MAEF,IAAIwB,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACK,IAAI,CAAC,IAAIL,QAAQ,CAACK,IAAI,CAACC,MAAM,KAAKtB,SAAS,CAACsB,MAAM,EAAE;QAC7EtB,SAAS,CAACuB,OAAO,CAAC,CAACR,IAAI,EAAES,KAAK,KAAK;UAAA,IAAAC,oBAAA;UACjC,IAAIC,cAAc,GAAG,EAAAD,oBAAA,GAAAT,QAAQ,CAACK,IAAI,CAACG,KAAK,CAAC,cAAAC,oBAAA,uBAApBA,oBAAA,CAAsBE,gBAAgB,KAAIZ,IAAI,CAACL,IAAI;UACxE,IAAIK,IAAI,CAACH,aAAa,EAAE;YACtBG,IAAI,CAACb,IAAI,CAACS,WAAW,GAAGe,cAAc;UACxC,CAAC,MAAM;YACLX,IAAI,CAACb,IAAI,CAACK,SAAS,GAAGmB,cAAc;UACtC;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA,IAAAC,eAAA;MACdC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACZ,QAAQ,cAAAa,eAAA,uBAAdA,eAAA,CAAgBR,IAAI,KAAIO,KAAK,CAACG,OAAO,CAAC;IAC5E;EACF,CAAC;EAED,oBACE/C,OAAA,CAACC,eAAe,CAAC+C,QAAQ;IAACC,KAAK,EAAE;MAAE5C,QAAQ;MAAEC,WAAW;MAAEI;IAAc,CAAE;IAAAP,QAAA,EACvEA;EAAQ;IAAA+C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACjD,EAAA,CAlDWF,gBAAgB;AAAAoD,EAAA,GAAhBpD,gBAAgB;AAAA,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}