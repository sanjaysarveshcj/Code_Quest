{"ast":null,"code":"import * as api from \"../api\";\nexport const askquestion = (questiondata, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.postquestion(questiondata, {\n      headers: {\n        'Content-Type': 'multipart/form-data' // Necessary for file uploads\n      }\n    });\n    dispatch({\n      type: \"POST_QUESTION\",\n      payload: data\n    });\n    dispatch(fetchallquestion());\n    navigate(\"/\");\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchallquestion = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getallquestions();\n    dispatch({\n      type: \"FETCH_ALL_QUESTIONS\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletequestion = (id, navigate) => async dispatch => {\n  try {\n    await api.deletequestion(id);\n    dispatch(fetchallquestion());\n    navigate(\"/\");\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const votequestion = (id, value) => async dispatch => {\n  try {\n    await api.votequestion(id, value);\n    dispatch(fetchallquestion());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postanswer = answerdata => async dispatch => {\n  try {\n    const {\n      id,\n      noofanswers,\n      answerbody,\n      useranswered\n    } = answerdata;\n    const {\n      data\n    } = await api.postanswer(id, noofanswers, answerbody, useranswered);\n    dispatch({\n      type: \"POST_ANSWER\",\n      payload: data\n    });\n    dispatch(fetchallquestion());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteanswer = (id, answerid, noofanswers) => async dispatch => {\n  try {\n    await api.deleteanswer(id, answerid, noofanswers);\n    dispatch(fetchallquestion());\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["api","askquestion","questiondata","navigate","dispatch","data","postquestion","headers","type","payload","fetchallquestion","error","console","log","getallquestions","deletequestion","id","votequestion","value","postanswer","answerdata","noofanswers","answerbody","useranswered","deleteanswer","answerid"],"sources":["D:/codequest-main (2)/codequest-main/client/src/action/question.js"],"sourcesContent":["import * as api from \"../api\"\n\nexport const askquestion = (questiondata, navigate) => async (dispatch) => {\n    try {\n        const { data } = await api.postquestion(questiondata, {\n            headers: {\n                'Content-Type': 'multipart/form-data', // Necessary for file uploads\n            },\n        });\n        dispatch({ type: \"POST_QUESTION\", payload: data });\n        dispatch(fetchallquestion())\n        navigate(\"/\")\n    } catch (error) {\n        console.log(error)\n    }\n};\n\nexport const fetchallquestion = () => async (dispatch) => {\n    try {\n        const { data } = await api.getallquestions();\n        dispatch({ type: \"FETCH_ALL_QUESTIONS\", payload: data })\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const deletequestion = (id, navigate) => async (dispatch) => {\n    try {\n        await api.deletequestion(id);\n        dispatch(fetchallquestion());\n        navigate(\"/\")\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const votequestion = (id, value) => async (dispatch) => {\n    try {\n        await api.votequestion(id, value);\n        dispatch(fetchallquestion())\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\nexport const postanswer=(answerdata)=>async(dispatch)=>{\n    try {\n        const{id,noofanswers,answerbody,useranswered}=answerdata;\n        const {data}=await api.postanswer(id,noofanswers,answerbody,useranswered);\n        dispatch({type:\"POST_ANSWER\",payload:data});\n        dispatch(fetchallquestion())\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const deleteanswer=(id,answerid,noofanswers)=>async(dispatch)=>{\n    try {\n        await api.deleteanswer(id,answerid,noofanswers);\n        dispatch(fetchallquestion())\n    } catch (error) {\n        console.log(error)\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}