{"ast":null,"code":"var _jsxFileName = \"D:\\\\codequest-main (2)\\\\codequest-main\\\\client\\\\src\\\\pages\\\\chatbot\\\\chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./chatbot.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [question, setQuestion] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [otpSent, setOtpSent] = useState(false);\n  const [verified, setVerified] = useState(false);\n  const [answer, setAnswer] = useState(\"\");\n  const handleSendOtp = async () => {\n    if (!email || !question) {\n      setMessage(\"Please enter your email and question.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/send-otp\", {\n        email\n      });\n      setMessage(response.data.message);\n      setOtpSent(true);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Failed to send OTP. Please try again.\");\n    }\n  };\n  const handleVerifyOtp = async () => {\n    if (!otp) {\n      setMessage(\"Please enter the OTP.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/verify-otp\", {\n        email,\n        otp\n      });\n      if (response.data.success) {\n        setVerified(true);\n        setMessage(\"OTP verified! Fetching the answer...\");\n        fetchAnswer();\n      } else {\n        setMessage(\"Invalid or expired OTP. Please try again.\");\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setMessage(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Failed to verify OTP. Please try again.\");\n    }\n  };\n  const fetchAnswer = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/chatbot\", {\n        question\n      });\n      setAnswer(response.data.answer);\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      setMessage(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || \"Error occurred while fetching the answer.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatbot with OTP Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), !otpSent ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Enter your question\",\n        value: question,\n        onChange: e => setQuestion(e.target.value),\n        className: \"chatbot-textarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Enter your email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        className: \"chatbot-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendOtp,\n        className: \"chatbot-button\",\n        children: \"Send OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : !verified ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter OTP\",\n        value: otp,\n        onChange: e => setOtp(e.target.value),\n        className: \"chatbot-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVerifyOtp,\n        className: \"chatbot-button\",\n        children: \"Verify & Get Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: \"chatbot-answer\",\n      children: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"chatbot-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"Qzfs8LSgZ99XRp5DHXeiRdW8Ifk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","email","setEmail","otp","setOtp","question","setQuestion","message","setMessage","otpSent","setOtpSent","verified","setVerified","answer","setAnswer","handleSendOtp","response","post","data","error","_error$response","_error$response$data","handleVerifyOtp","success","fetchAnswer","_error$response2","_error$response2$data","_error$response3","_error$response3$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","type","onClick","_c","$RefreshReg$"],"sources":["D:/codequest-main (2)/codequest-main/client/src/pages/chatbot/chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./chatbot.css\";\r\n\r\nconst Chatbot = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [otp, setOtp] = useState(\"\");\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [verified, setVerified] = useState(false);\r\n  const [answer, setAnswer] = useState(\"\");\r\n\r\n  const handleSendOtp = async () => {\r\n    if (!email || !question) {\r\n      setMessage(\"Please enter your email and question.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/send-otp\", { email });\r\n      setMessage(response.data.message);\r\n      setOtpSent(true);\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || \"Failed to send OTP. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const handleVerifyOtp = async () => {\r\n    if (!otp) {\r\n      setMessage(\"Please enter the OTP.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/verify-otp\", { email, otp });\r\n      if (response.data.success) {\r\n        setVerified(true);\r\n        setMessage(\"OTP verified! Fetching the answer...\");\r\n        fetchAnswer();\r\n      } else {\r\n        setMessage(\"Invalid or expired OTP. Please try again.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || \"Failed to verify OTP. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const fetchAnswer = async () => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/chatbot\", { question });\r\n      setAnswer(response.data.answer);\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || \"Error occurred while fetching the answer.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h2>Chatbot with OTP Verification</h2>\r\n\r\n      {!otpSent ? (\r\n        <>\r\n          <textarea\r\n            placeholder=\"Enter your question\"\r\n            value={question}\r\n            onChange={(e) => setQuestion(e.target.value)}\r\n            className=\"chatbot-textarea\"\r\n          />\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Enter your email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            className=\"chatbot-input\"\r\n          />\r\n          <button onClick={handleSendOtp} className=\"chatbot-button\">\r\n            Send OTP\r\n          </button>\r\n        </>\r\n      ) : !verified ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter OTP\"\r\n            value={otp}\r\n            onChange={(e) => setOtp(e.target.value)}\r\n            className=\"chatbot-input\"\r\n          />\r\n          <button onClick={handleVerifyOtp} className=\"chatbot-button\">\r\n            Verify & Get Response\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <pre className=\"chatbot-answer\">{answer}</pre>\r\n      )}\r\n\r\n      {message && <p className=\"chatbot-message\">{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}