{"ast":null,"code":"var _jsxFileName = \"D:\\\\codequest-main (2)\\\\codequest-main\\\\client\\\\src\\\\pages\\\\Multilanguage\\\\Multilingual.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport './Multilingual.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Multilingual = () => {\n  _s();\n  const [language, setLanguage] = useState(\"en\");\n  const [emailOrMobile, setEmailOrMobile] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [isVerified, setIsVerified] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [translatedText, setTranslatedText] = useState(null);\n  const translatePage = async (lang, retryCount = 5, delay = 5000) => {\n    setTranslatedText(\"Translating... Please wait ‚è≥\");\n    try {\n      console.log(`Requesting translation for: ${lang}`);\n\n      // Get all text nodes dynamically\n      const elements = document.body.getElementsByTagName(\"*\");\n      let textNodes = [];\n      for (let i = 0; i < elements.length; i++) {\n        let element = elements[i];\n        for (let node of element.childNodes) {\n          if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== \"\") {\n            textNodes.push(node);\n          }\n        }\n      }\n\n      // Collect all texts\n      let texts = textNodes.map(node => node.nodeValue.trim());\n\n      // Retry mechanism\n      for (let attempt = 0; attempt < retryCount; attempt++) {\n        try {\n          // Send texts to translation API\n          const response = await axios.post(\"http://localhost:5000/api/translate\", {\n            text: texts,\n            targetLang: lang\n          });\n          console.log(\"Full Translation Response:\", response.data);\n          if (Array.isArray(response.data) && response.data.length === texts.length) {\n            const translatedTexts = response.data.map(item => item.translation_text);\n            textNodes.forEach((node, index) => {\n              node.nodeValue = translatedTexts[index] || node.nodeValue;\n            });\n            setTranslatedText(\"Translation successful ‚úÖ\");\n            return;\n          } else {\n            setTranslatedText(\"Translation failed. Unexpected response.\");\n            return;\n          }\n        } catch (error) {\n          var _error$response, _error$response$data, _error$response$data$;\n          if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && (_error$response$data$ = _error$response$data.error) !== null && _error$response$data$ !== void 0 && _error$response$data$.includes(\"currently loading\") && attempt < retryCount - 1) {\n            console.warn(`Model still loading... Retrying in ${delay / 1000} seconds`);\n            await new Promise(res => setTimeout(res, delay));\n          } else {\n            throw error; // If it's another error or max retries exceeded, throw it\n          }\n        }\n      }\n      setTranslatedText(\"Translation failed after multiple attempts.\");\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Translation Error:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      setTranslatedText(\"Translation failed. Please try again.\");\n    }\n  };\n\n  /** üîπ Handle Language Selection */\n  const handleLanguageChange = async lang => {\n    setLanguage(lang);\n    setTranslatedText(null); // Reset translation\n\n    if (isVerified) {\n      await translatePage(lang);\n    }\n  };\n\n  /** üîπ Handle OTP Request */\n  const handleSendOtp = async () => {\n    if (!emailOrMobile) {\n      alert(language === \"fr\" ? \"Veuillez entrer votre email.\" : \"Please enter an email or mobile number.\");\n      return;\n    }\n    const endpoint = language === \"fr\" ? \"/api/send-otp\" : \"/user/send-otp-mobile\";\n    const payload = language === \"fr\" ? {\n      email: emailOrMobile\n    } : {\n      mobile: emailOrMobile\n    };\n    try {\n      const response = await axios.post(`http://localhost:5000${endpoint}`, payload);\n      setMessage(response.data.message);\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      setMessage(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || \"Failed to send OTP.\");\n    }\n  };\n\n  /** üîπ Handle OTP Verification */\n  const handleVerifyOtp = async () => {\n    if (!otp) {\n      alert(language === \"fr\" ? \"Veuillez entrer le code OTP.\" : \"Please enter the OTP.\");\n      return;\n    }\n    const endpoint = language === \"fr\" ? \"/api/verify-otp\" : \"/user/verify-otp-mobile\";\n    const payload = language === \"fr\" ? {\n      email: emailOrMobile,\n      otp\n    } : {\n      mobile: emailOrMobile,\n      otp\n    };\n    try {\n      const response = await axios.post(`http://localhost:5000${endpoint}`, payload);\n      setIsVerified(true);\n      setMessage(response.data.message || \"OTP verified successfully!\");\n      await translatePage(language); // Translate page after OTP verification\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      setMessage(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || \"Invalid or expired OTP.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"otp-title\",\n      children: translatedText || \"Welcome to the OTP verification system\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"otp-language-selector\",\n      onChange: e => handleLanguageChange(e.target.value),\n      value: language,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"en\",\n        children: \"English\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"es\",\n        children: \"Spanish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"hi\",\n        children: \"Hindi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"pt\",\n        children: \"Portuguese\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"zh\",\n        children: \"Chinese\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"fr\",\n        children: \"French\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"otp-input-container\",\n      children: [language === \"fr\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"otp-input\",\n        type: \"email\",\n        placeholder: \"Enter your email\",\n        value: emailOrMobile,\n        onChange: e => setEmailOrMobile(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"otp-input\",\n        type: \"text\",\n        placeholder: \"Enter your mobile number\",\n        value: emailOrMobile,\n        onChange: e => setEmailOrMobile(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"otp-button\",\n        onClick: handleSendOtp,\n        children: \"Send OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 3\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `otp-message ${isVerified ? \"success\" : \"error\"}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 15\n    }, this), emailOrMobile && !isVerified && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"otp-verification-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"otp-input\",\n        type: \"text\",\n        placeholder: \"Enter OTP\",\n        value: otp,\n        onChange: e => setOtp(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"otp-button\",\n        onClick: handleVerifyOtp,\n        children: \"Verify OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }, this), isVerified && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"otp-success-message\",\n      children: translatedText || \"Verification successful! You are authenticated.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(Multilingual, \"EzzBoUb7H49/zDEjHmPe8iZ/d8s=\");\n_c = Multilingual;\nexport default Multilingual;\nvar _c;\n$RefreshReg$(_c, \"Multilingual\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Multilingual","_s","language","setLanguage","emailOrMobile","setEmailOrMobile","otp","setOtp","isVerified","setIsVerified","message","setMessage","translatedText","setTranslatedText","translatePage","lang","retryCount","delay","console","log","elements","document","body","getElementsByTagName","textNodes","i","length","element","node","childNodes","nodeType","Node","TEXT_NODE","nodeValue","trim","push","texts","map","attempt","response","post","text","targetLang","data","Array","isArray","translatedTexts","item","translation_text","forEach","index","error","_error$response","_error$response$data","_error$response$data$","includes","warn","Promise","res","setTimeout","_error$response2","handleLanguageChange","handleSendOtp","alert","endpoint","payload","email","mobile","_error$response3","_error$response3$data","handleVerifyOtp","_error$response4","_error$response4$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/codequest-main (2)/codequest-main/client/src/pages/Multilanguage/Multilingual.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport './Multilingual.css';\r\n\r\nconst Multilingual = () => {\r\n  const [language, setLanguage] = useState(\"en\");\r\n  const [emailOrMobile, setEmailOrMobile] = useState(\"\");\r\n  const [otp, setOtp] = useState(\"\");\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [translatedText, setTranslatedText] = useState(null);\r\n\r\n\r\n  const translatePage = async (lang, retryCount = 5, delay = 5000) => {\r\n    setTranslatedText(\"Translating... Please wait ‚è≥\");\r\n\r\n    try {\r\n        console.log(`Requesting translation for: ${lang}`);\r\n\r\n        // Get all text nodes dynamically\r\n        const elements = document.body.getElementsByTagName(\"*\");\r\n        let textNodes = [];\r\n\r\n        for (let i = 0; i < elements.length; i++) {\r\n            let element = elements[i];\r\n            for (let node of element.childNodes) {\r\n                if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== \"\") {\r\n                    textNodes.push(node);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Collect all texts\r\n        let texts = textNodes.map((node) => node.nodeValue.trim());\r\n\r\n        // Retry mechanism\r\n        for (let attempt = 0; attempt < retryCount; attempt++) {\r\n            try {\r\n                // Send texts to translation API\r\n                const response = await axios.post(\"http://localhost:5000/api/translate\", {\r\n                    text: texts,\r\n                    targetLang: lang,\r\n                });\r\n\r\n                console.log(\"Full Translation Response:\", response.data);\r\n\r\n                if (Array.isArray(response.data) && response.data.length === texts.length) {\r\n                    const translatedTexts = response.data.map(item => item.translation_text);\r\n\r\n                    textNodes.forEach((node, index) => {\r\n                        node.nodeValue = translatedTexts[index] || node.nodeValue;\r\n                    });\r\n\r\n                    setTranslatedText(\"Translation successful ‚úÖ\");\r\n                    return;\r\n                } else {\r\n                    setTranslatedText(\"Translation failed. Unexpected response.\");\r\n                    return;\r\n                }\r\n            } catch (error) {\r\n                if (error.response?.data?.error?.includes(\"currently loading\") && attempt < retryCount - 1) {\r\n                    console.warn(`Model still loading... Retrying in ${delay / 1000} seconds`);\r\n                    await new Promise(res => setTimeout(res, delay));\r\n                } else {\r\n                    throw error; // If it's another error or max retries exceeded, throw it\r\n                }\r\n            }\r\n        }\r\n\r\n        setTranslatedText(\"Translation failed after multiple attempts.\");\r\n    } catch (error) {\r\n        console.error(\"Translation Error:\", error.response?.data || error.message);\r\n        setTranslatedText(\"Translation failed. Please try again.\");\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /** üîπ Handle Language Selection */\r\n  const handleLanguageChange = async (lang) => {\r\n    setLanguage(lang);\r\n    setTranslatedText(null); // Reset translation\r\n\r\n    if (isVerified) {\r\n      await translatePage(lang);\r\n    }\r\n  };\r\n\r\n  /** üîπ Handle OTP Request */\r\n  const handleSendOtp = async () => {\r\n    if (!emailOrMobile) {\r\n      alert(language === \"fr\" ? \"Veuillez entrer votre email.\" : \"Please enter an email or mobile number.\");\r\n      return;\r\n    }\r\n\r\n    const endpoint = language === \"fr\" ? \"/api/send-otp\" : \"/user/send-otp-mobile\";\r\n    const payload = language === \"fr\" ? { email: emailOrMobile } : { mobile: emailOrMobile };\r\n\r\n    try {\r\n      const response = await axios.post(`http://localhost:5000${endpoint}`, payload);\r\n      setMessage(response.data.message);\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || \"Failed to send OTP.\");\r\n    }\r\n  };\r\n\r\n  /** üîπ Handle OTP Verification */\r\n  const handleVerifyOtp = async () => {\r\n    if (!otp) {\r\n      alert(language === \"fr\" ? \"Veuillez entrer le code OTP.\" : \"Please enter the OTP.\");\r\n      return;\r\n    }\r\n\r\n    const endpoint = language === \"fr\" ? \"/api/verify-otp\" : \"/user/verify-otp-mobile\";\r\n    const payload = language === \"fr\" ? { email: emailOrMobile, otp } : { mobile: emailOrMobile, otp };\r\n\r\n    try {\r\n      const response = await axios.post(`http://localhost:5000${endpoint}`, payload);\r\n      setIsVerified(true);\r\n      setMessage(response.data.message || \"OTP verified successfully!\");\r\n      await translatePage(language); // Translate page after OTP verification\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || \"Invalid or expired OTP.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"otp-page\">\r\n  <h1 className=\"otp-title\">{translatedText || \"Welcome to the OTP verification system\"}</h1>\r\n\r\n  {/* üîπ Language Selection */}\r\n  <select\r\n    className=\"otp-language-selector\"\r\n    onChange={(e) => handleLanguageChange(e.target.value)}\r\n    value={language}\r\n  >\r\n    <option value=\"en\">English</option>\r\n    <option value=\"es\">Spanish</option>\r\n    <option value=\"hi\">Hindi</option>\r\n    <option value=\"pt\">Portuguese</option>\r\n    <option value=\"zh\">Chinese</option>\r\n    <option value=\"fr\">French</option>\r\n  </select>\r\n\r\n  {/* üîπ Conditional Input (Email for French, Mobile for Others) */}\r\n  <div className=\"otp-input-container\">\r\n    {language === \"fr\" ? (\r\n      <input\r\n        className=\"otp-input\"\r\n        type=\"email\"\r\n        placeholder=\"Enter your email\"\r\n        value={emailOrMobile}\r\n        onChange={(e) => setEmailOrMobile(e.target.value)}\r\n      />\r\n    ) : (\r\n      <input\r\n        className=\"otp-input\"\r\n        type=\"text\"\r\n        placeholder=\"Enter your mobile number\"\r\n        value={emailOrMobile}\r\n        onChange={(e) => setEmailOrMobile(e.target.value)}\r\n      />\r\n    )}\r\n    <button className=\"otp-button\" onClick={handleSendOtp}>\r\n      Send OTP\r\n    </button>\r\n  </div>\r\n\r\n  {message && <p className={`otp-message ${isVerified ? \"success\" : \"error\"}`}>{message}</p>}\r\n\r\n  {/* üîπ OTP Input Field */}\r\n  {emailOrMobile && !isVerified && (\r\n    <div className=\"otp-verification-container\">\r\n      <input\r\n        className=\"otp-input\"\r\n        type=\"text\"\r\n        placeholder=\"Enter OTP\"\r\n        value={otp}\r\n        onChange={(e) => setOtp(e.target.value)}\r\n      />\r\n      <button className=\"otp-button\" onClick={handleVerifyOtp}>\r\n        Verify OTP\r\n      </button>\r\n    </div>\r\n  )}\r\n\r\n  {/* üîπ Verification Success Message */}\r\n  {isVerified && (\r\n    <p className=\"otp-success-message\">\r\n      {translatedText || \"Verification successful! You are authenticated.\"}\r\n    </p>\r\n  )}\r\n</div>\r\n\r\n  );\r\n};\r\n\r\nexport default Multilingual;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}